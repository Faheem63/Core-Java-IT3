import java.lang.management.ManagementFactory;
import java.lang.management.ThreadInfo;
import java.lang.management.ThreadMXBean;

public class DeadlockSimulation {

    private static final Object Resource1 = new Object();
    private static final Object Resource2 = new Object();

    public static void main(String[] args) {
        // Thread 1
        Thread thread1 = new Thread(() -> {
            synchronized (Resource1) {
                System.out.println(Thread.currentThread().getName() + " locked Resource1");
                try {
                    // Simulate some work with Resource1
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread().getName() + " attempting to lock Resource2");
                synchronized (Resource2) {
                    System.out.println(Thread.currentThread().getName() + " locked Resource2");
                }
            }
        }, "Thread-1");

        // Thread 2
        Thread thread2 = new Thread(() -> {
            synchronized (Resource2) {
                System.out.println(Thread.currentThread().getName() + " locked Resource2");
                try {
                    // Simulate some work with Resource2
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread().getName() + " attempting to lock Resource1");
                synchronized (Resource1) {
                    System.out.println(Thread.currentThread().getName() + " locked Resource1");
                }
            }
        }, "Thread-2");

        thread1.start();
        thread2.start();

        // Start a deadlock detection thread
        Thread deadlockDetector = new Thread(() -> {
            detectDeadlock();
        });
        deadlockDetector.setDaemon(true);
        deadlockDetector.start();
    }

    // Method to detect deadlocks dynamically
    private static void detectDeadlock() {
        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();

        while (true) {
            long[] deadlockedThreads = threadMXBean.findDeadlockedThreads();
            if (deadlockedThreads != null) {
                System.out.println("\nDeadlock detected! Terminating program.");
                ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(deadlockedThreads);
                for (ThreadInfo threadInfo : threadInfos) {
                    System.out.println("Thread involved in deadlock: " + threadInfo.getThreadName());
                }
                System.exit(1);
            }
            try {
                Thread.sleep(500); // Check for deadlock every 500 ms
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
